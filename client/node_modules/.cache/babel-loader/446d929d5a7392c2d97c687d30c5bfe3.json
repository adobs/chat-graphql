{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};\n\nvar NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\n\nvar Backoff = require(\"backo2\");\n\nvar eventemitter3_1 = require(\"eventemitter3\");\n\nvar is_string_1 = require(\"./utils/is-string\");\n\nvar is_object_1 = require(\"./utils/is-object\");\n\nvar printer_1 = require(\"graphql/language/printer\");\n\nvar getOperationAST_1 = require(\"graphql/utilities/getOperationAST\");\n\nvar symbol_observable_1 = require(\"symbol-observable\");\n\nvar protocol_1 = require(\"./protocol\");\n\nvar defaults_1 = require(\"./defaults\");\n\nvar message_types_1 = require(\"./message-types\");\n\nvar SubscriptionClient = function () {\n  function SubscriptionClient(url, options, webSocketImpl, webSocketProtocols) {\n    var _a = options || {},\n        _b = _a.connectionCallback,\n        connectionCallback = _b === void 0 ? undefined : _b,\n        _c = _a.connectionParams,\n        connectionParams = _c === void 0 ? {} : _c,\n        _d = _a.timeout,\n        timeout = _d === void 0 ? defaults_1.WS_TIMEOUT : _d,\n        _e = _a.reconnect,\n        reconnect = _e === void 0 ? false : _e,\n        _f = _a.reconnectionAttempts,\n        reconnectionAttempts = _f === void 0 ? Infinity : _f,\n        _g = _a.lazy,\n        lazy = _g === void 0 ? false : _g,\n        _h = _a.inactivityTimeout,\n        inactivityTimeout = _h === void 0 ? 0 : _h;\n\n    this.wsImpl = webSocketImpl || NativeWebSocket;\n\n    if (!this.wsImpl) {\n      throw new Error('Unable to find native implementation, or alternative implementation for WebSocket!');\n    }\n\n    this.wsProtocols = webSocketProtocols || protocol_1.GRAPHQL_WS;\n    this.connectionCallback = connectionCallback;\n    this.url = url;\n    this.operations = {};\n    this.nextOperationId = 0;\n    this.wsTimeout = timeout;\n    this.unsentMessagesQueue = [];\n    this.reconnect = reconnect;\n    this.reconnecting = false;\n    this.reconnectionAttempts = reconnectionAttempts;\n    this.lazy = !!lazy;\n    this.inactivityTimeout = inactivityTimeout;\n    this.closedByUser = false;\n    this.backoff = new Backoff({\n      jitter: 0.5\n    });\n    this.eventEmitter = new eventemitter3_1.EventEmitter();\n    this.middlewares = [];\n    this.client = null;\n    this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator();\n    this.connectionParams = this.getConnectionParams(connectionParams);\n\n    if (!this.lazy) {\n      this.connect();\n    }\n  }\n\n  Object.defineProperty(SubscriptionClient.prototype, \"status\", {\n    get: function () {\n      if (this.client === null) {\n        return this.wsImpl.CLOSED;\n      }\n\n      return this.client.readyState;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SubscriptionClient.prototype.close = function (isForced, closedByUser) {\n    if (isForced === void 0) {\n      isForced = true;\n    }\n\n    if (closedByUser === void 0) {\n      closedByUser = true;\n    }\n\n    this.clearInactivityTimeout();\n\n    if (this.client !== null) {\n      this.closedByUser = closedByUser;\n\n      if (isForced) {\n        this.clearCheckConnectionInterval();\n        this.clearMaxConnectTimeout();\n        this.clearTryReconnectTimeout();\n        this.unsubscribeAll();\n        this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_TERMINATE, null);\n      }\n\n      this.client.close();\n      this.client = null;\n      this.eventEmitter.emit('disconnected');\n\n      if (!isForced) {\n        this.tryReconnect();\n      }\n    }\n  };\n\n  SubscriptionClient.prototype.request = function (request) {\n    var _a;\n\n    var getObserver = this.getObserver.bind(this);\n    var executeOperation = this.executeOperation.bind(this);\n    var unsubscribe = this.unsubscribe.bind(this);\n    var opId;\n    this.clearInactivityTimeout();\n    return _a = {}, _a[symbol_observable_1.default] = function () {\n      return this;\n    }, _a.subscribe = function (observerOrNext, onError, onComplete) {\n      var observer = getObserver(observerOrNext, onError, onComplete);\n      opId = executeOperation(request, function (error, result) {\n        if (error === null && result === null) {\n          if (observer.complete) {\n            observer.complete();\n          }\n        } else if (error) {\n          if (observer.error) {\n            observer.error(error[0]);\n          }\n        } else {\n          if (observer.next) {\n            observer.next(result);\n          }\n        }\n      });\n      return {\n        unsubscribe: function () {\n          if (opId) {\n            unsubscribe(opId);\n            opId = null;\n          }\n        }\n      };\n    }, _a;\n  };\n\n  SubscriptionClient.prototype.on = function (eventName, callback, context) {\n    var handler = this.eventEmitter.on(eventName, callback, context);\n    return function () {\n      handler.off(eventName, callback, context);\n    };\n  };\n\n  SubscriptionClient.prototype.onConnected = function (callback, context) {\n    return this.on('connected', callback, context);\n  };\n\n  SubscriptionClient.prototype.onConnecting = function (callback, context) {\n    return this.on('connecting', callback, context);\n  };\n\n  SubscriptionClient.prototype.onDisconnected = function (callback, context) {\n    return this.on('disconnected', callback, context);\n  };\n\n  SubscriptionClient.prototype.onReconnected = function (callback, context) {\n    return this.on('reconnected', callback, context);\n  };\n\n  SubscriptionClient.prototype.onReconnecting = function (callback, context) {\n    return this.on('reconnecting', callback, context);\n  };\n\n  SubscriptionClient.prototype.onError = function (callback, context) {\n    return this.on('error', callback, context);\n  };\n\n  SubscriptionClient.prototype.unsubscribeAll = function () {\n    var _this = this;\n\n    Object.keys(this.operations).forEach(function (subId) {\n      _this.unsubscribe(subId);\n    });\n  };\n\n  SubscriptionClient.prototype.applyMiddlewares = function (options) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var queue = function (funcs, scope) {\n        var next = function (error) {\n          if (error) {\n            reject(error);\n          } else {\n            if (funcs.length > 0) {\n              var f = funcs.shift();\n\n              if (f) {\n                f.applyMiddleware.apply(scope, [options, next]);\n              }\n            } else {\n              resolve(options);\n            }\n          }\n        };\n\n        next();\n      };\n\n      queue(_this.middlewares.slice(), _this);\n    });\n  };\n\n  SubscriptionClient.prototype.use = function (middlewares) {\n    var _this = this;\n\n    middlewares.map(function (middleware) {\n      if (typeof middleware.applyMiddleware === 'function') {\n        _this.middlewares.push(middleware);\n      } else {\n        throw new Error('Middleware must implement the applyMiddleware function.');\n      }\n    });\n    return this;\n  };\n\n  SubscriptionClient.prototype.getConnectionParams = function (connectionParams) {\n    return function () {\n      return new Promise(function (resolve, reject) {\n        if (typeof connectionParams === 'function') {\n          try {\n            return resolve(connectionParams.call(null));\n          } catch (error) {\n            return reject(error);\n          }\n        }\n\n        resolve(connectionParams);\n      });\n    };\n  };\n\n  SubscriptionClient.prototype.executeOperation = function (options, handler) {\n    var _this = this;\n\n    if (this.client === null) {\n      this.connect();\n    }\n\n    var opId = this.generateOperationId();\n    this.operations[opId] = {\n      options: options,\n      handler: handler\n    };\n    this.applyMiddlewares(options).then(function (processedOptions) {\n      _this.checkOperationOptions(processedOptions, handler);\n\n      if (_this.operations[opId]) {\n        _this.operations[opId] = {\n          options: processedOptions,\n          handler: handler\n        };\n\n        _this.sendMessage(opId, message_types_1.default.GQL_START, processedOptions);\n      }\n    }).catch(function (error) {\n      _this.unsubscribe(opId);\n\n      handler(_this.formatErrors(error));\n    });\n    return opId;\n  };\n\n  SubscriptionClient.prototype.getObserver = function (observerOrNext, error, complete) {\n    if (typeof observerOrNext === 'function') {\n      return {\n        next: function (v) {\n          return observerOrNext(v);\n        },\n        error: function (e) {\n          return error && error(e);\n        },\n        complete: function () {\n          return complete && complete();\n        }\n      };\n    }\n\n    return observerOrNext;\n  };\n\n  SubscriptionClient.prototype.createMaxConnectTimeGenerator = function () {\n    var minValue = 1000;\n    var maxValue = this.wsTimeout;\n    return new Backoff({\n      min: minValue,\n      max: maxValue,\n      factor: 1.2\n    });\n  };\n\n  SubscriptionClient.prototype.clearCheckConnectionInterval = function () {\n    if (this.checkConnectionIntervalId) {\n      clearInterval(this.checkConnectionIntervalId);\n      this.checkConnectionIntervalId = null;\n    }\n  };\n\n  SubscriptionClient.prototype.clearMaxConnectTimeout = function () {\n    if (this.maxConnectTimeoutId) {\n      clearTimeout(this.maxConnectTimeoutId);\n      this.maxConnectTimeoutId = null;\n    }\n  };\n\n  SubscriptionClient.prototype.clearTryReconnectTimeout = function () {\n    if (this.tryReconnectTimeoutId) {\n      clearTimeout(this.tryReconnectTimeoutId);\n      this.tryReconnectTimeoutId = null;\n    }\n  };\n\n  SubscriptionClient.prototype.clearInactivityTimeout = function () {\n    if (this.inactivityTimeoutId) {\n      clearTimeout(this.inactivityTimeoutId);\n      this.inactivityTimeoutId = null;\n    }\n  };\n\n  SubscriptionClient.prototype.setInactivityTimeout = function () {\n    var _this = this;\n\n    if (this.inactivityTimeout > 0 && Object.keys(this.operations).length === 0) {\n      this.inactivityTimeoutId = setTimeout(function () {\n        if (Object.keys(_this.operations).length === 0) {\n          _this.close();\n        }\n      }, this.inactivityTimeout);\n    }\n  };\n\n  SubscriptionClient.prototype.checkOperationOptions = function (options, handler) {\n    var query = options.query,\n        variables = options.variables,\n        operationName = options.operationName;\n\n    if (!query) {\n      throw new Error('Must provide a query.');\n    }\n\n    if (!handler) {\n      throw new Error('Must provide an handler.');\n    }\n\n    if (!is_string_1.default(query) && !getOperationAST_1.getOperationAST(query, operationName) || operationName && !is_string_1.default(operationName) || variables && !is_object_1.default(variables)) {\n      throw new Error('Incorrect option types. query must be a string or a document,' + '`operationName` must be a string, and `variables` must be an object.');\n    }\n  };\n\n  SubscriptionClient.prototype.buildMessage = function (id, type, payload) {\n    var payloadToReturn = payload && payload.query ? __assign({}, payload, {\n      query: typeof payload.query === 'string' ? payload.query : printer_1.print(payload.query)\n    }) : payload;\n    return {\n      id: id,\n      type: type,\n      payload: payloadToReturn\n    };\n  };\n\n  SubscriptionClient.prototype.formatErrors = function (errors) {\n    if (Array.isArray(errors)) {\n      return errors;\n    }\n\n    if (errors && errors.errors) {\n      return this.formatErrors(errors.errors);\n    }\n\n    if (errors && errors.message) {\n      return [errors];\n    }\n\n    return [{\n      name: 'FormatedError',\n      message: 'Unknown error',\n      originalError: errors\n    }];\n  };\n\n  SubscriptionClient.prototype.sendMessage = function (id, type, payload) {\n    this.sendMessageRaw(this.buildMessage(id, type, payload));\n  };\n\n  SubscriptionClient.prototype.sendMessageRaw = function (message) {\n    switch (this.status) {\n      case this.wsImpl.OPEN:\n        var serializedMessage = JSON.stringify(message);\n\n        try {\n          JSON.parse(serializedMessage);\n        } catch (e) {\n          this.eventEmitter.emit('error', new Error(\"Message must be JSON-serializable. Got: \" + message));\n        }\n\n        this.client.send(serializedMessage);\n        break;\n\n      case this.wsImpl.CONNECTING:\n        this.unsentMessagesQueue.push(message);\n        break;\n\n      default:\n        if (!this.reconnecting) {\n          this.eventEmitter.emit('error', new Error('A message was not sent because socket is not connected, is closing or ' + 'is already closed. Message was: ' + JSON.stringify(message)));\n        }\n\n    }\n  };\n\n  SubscriptionClient.prototype.generateOperationId = function () {\n    return String(++this.nextOperationId);\n  };\n\n  SubscriptionClient.prototype.tryReconnect = function () {\n    var _this = this;\n\n    if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {\n      return;\n    }\n\n    if (!this.reconnecting) {\n      Object.keys(this.operations).forEach(function (key) {\n        _this.unsentMessagesQueue.push(_this.buildMessage(key, message_types_1.default.GQL_START, _this.operations[key].options));\n      });\n      this.reconnecting = true;\n    }\n\n    this.clearTryReconnectTimeout();\n    var delay = this.backoff.duration();\n    this.tryReconnectTimeoutId = setTimeout(function () {\n      _this.connect();\n    }, delay);\n  };\n\n  SubscriptionClient.prototype.flushUnsentMessagesQueue = function () {\n    var _this = this;\n\n    this.unsentMessagesQueue.forEach(function (message) {\n      _this.sendMessageRaw(message);\n    });\n    this.unsentMessagesQueue = [];\n  };\n\n  SubscriptionClient.prototype.checkConnection = function () {\n    if (this.wasKeepAliveReceived) {\n      this.wasKeepAliveReceived = false;\n      return;\n    }\n\n    if (!this.reconnecting) {\n      this.close(false, true);\n    }\n  };\n\n  SubscriptionClient.prototype.checkMaxConnectTimeout = function () {\n    var _this = this;\n\n    this.clearMaxConnectTimeout();\n    this.maxConnectTimeoutId = setTimeout(function () {\n      if (_this.status !== _this.wsImpl.OPEN) {\n        _this.reconnecting = true;\n\n        _this.close(false, true);\n      }\n    }, this.maxConnectTimeGenerator.duration());\n  };\n\n  SubscriptionClient.prototype.connect = function () {\n    var _this = this;\n\n    this.client = new this.wsImpl(this.url, this.wsProtocols);\n    this.checkMaxConnectTimeout();\n\n    this.client.onopen = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var connectionParams, error_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(this.status === this.wsImpl.OPEN)) return [3, 4];\n              this.clearMaxConnectTimeout();\n              this.closedByUser = false;\n              this.eventEmitter.emit(this.reconnecting ? 'reconnecting' : 'connecting');\n              _a.label = 1;\n\n            case 1:\n              _a.trys.push([1, 3,, 4]);\n\n              return [4, this.connectionParams()];\n\n            case 2:\n              connectionParams = _a.sent();\n              this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_INIT, connectionParams);\n              this.flushUnsentMessagesQueue();\n              return [3, 4];\n\n            case 3:\n              error_1 = _a.sent();\n              this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_ERROR, error_1);\n              this.flushUnsentMessagesQueue();\n              return [3, 4];\n\n            case 4:\n              return [2];\n          }\n        });\n      });\n    };\n\n    this.client.onclose = function () {\n      if (!_this.closedByUser) {\n        _this.close(false, false);\n      }\n    };\n\n    this.client.onerror = function (err) {\n      _this.eventEmitter.emit('error', err);\n    };\n\n    this.client.onmessage = function (_a) {\n      var data = _a.data;\n\n      _this.processReceivedData(data);\n    };\n  };\n\n  SubscriptionClient.prototype.processReceivedData = function (receivedData) {\n    var parsedMessage;\n    var opId;\n\n    try {\n      parsedMessage = JSON.parse(receivedData);\n      opId = parsedMessage.id;\n    } catch (e) {\n      throw new Error(\"Message must be JSON-parseable. Got: \" + receivedData);\n    }\n\n    if ([message_types_1.default.GQL_DATA, message_types_1.default.GQL_COMPLETE, message_types_1.default.GQL_ERROR].indexOf(parsedMessage.type) !== -1 && !this.operations[opId]) {\n      this.unsubscribe(opId);\n      return;\n    }\n\n    switch (parsedMessage.type) {\n      case message_types_1.default.GQL_CONNECTION_ERROR:\n        if (this.connectionCallback) {\n          this.connectionCallback(parsedMessage.payload);\n        }\n\n        break;\n\n      case message_types_1.default.GQL_CONNECTION_ACK:\n        this.eventEmitter.emit(this.reconnecting ? 'reconnected' : 'connected');\n        this.reconnecting = false;\n        this.backoff.reset();\n        this.maxConnectTimeGenerator.reset();\n\n        if (this.connectionCallback) {\n          this.connectionCallback();\n        }\n\n        break;\n\n      case message_types_1.default.GQL_COMPLETE:\n        this.operations[opId].handler(null, null);\n        delete this.operations[opId];\n        break;\n\n      case message_types_1.default.GQL_ERROR:\n        this.operations[opId].handler(this.formatErrors(parsedMessage.payload), null);\n        delete this.operations[opId];\n        break;\n\n      case message_types_1.default.GQL_DATA:\n        var parsedPayload = !parsedMessage.payload.errors ? parsedMessage.payload : __assign({}, parsedMessage.payload, {\n          errors: this.formatErrors(parsedMessage.payload.errors)\n        });\n        this.operations[opId].handler(null, parsedPayload);\n        break;\n\n      case message_types_1.default.GQL_CONNECTION_KEEP_ALIVE:\n        var firstKA = typeof this.wasKeepAliveReceived === 'undefined';\n        this.wasKeepAliveReceived = true;\n\n        if (firstKA) {\n          this.checkConnection();\n        }\n\n        if (this.checkConnectionIntervalId) {\n          clearInterval(this.checkConnectionIntervalId);\n          this.checkConnection();\n        }\n\n        this.checkConnectionIntervalId = setInterval(this.checkConnection.bind(this), this.wsTimeout);\n        break;\n\n      default:\n        throw new Error('Invalid message type!');\n    }\n  };\n\n  SubscriptionClient.prototype.unsubscribe = function (opId) {\n    if (this.operations[opId]) {\n      delete this.operations[opId];\n      this.setInactivityTimeout();\n      this.sendMessage(opId, message_types_1.default.GQL_STOP, undefined);\n    }\n  };\n\n  return SubscriptionClient;\n}();\n\nexports.SubscriptionClient = SubscriptionClient;","map":{"version":3,"sources":["../src/client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _global = typeof global !== 'undefined' ? global : (typeof window !== 'undefined' ? window : {});\nvar NativeWebSocket = _global.WebSocket || _global.MozWebSocket;\nvar Backoff = require(\"backo2\");\nvar eventemitter3_1 = require(\"eventemitter3\");\nvar is_string_1 = require(\"./utils/is-string\");\nvar is_object_1 = require(\"./utils/is-object\");\nvar printer_1 = require(\"graphql/language/printer\");\nvar getOperationAST_1 = require(\"graphql/utilities/getOperationAST\");\nvar symbol_observable_1 = require(\"symbol-observable\");\nvar protocol_1 = require(\"./protocol\");\nvar defaults_1 = require(\"./defaults\");\nvar message_types_1 = require(\"./message-types\");\nvar SubscriptionClient = (function () {\n    function SubscriptionClient(url, options, webSocketImpl, webSocketProtocols) {\n        var _a = (options || {}), _b = _a.connectionCallback, connectionCallback = _b === void 0 ? undefined : _b, _c = _a.connectionParams, connectionParams = _c === void 0 ? {} : _c, _d = _a.timeout, timeout = _d === void 0 ? defaults_1.WS_TIMEOUT : _d, _e = _a.reconnect, reconnect = _e === void 0 ? false : _e, _f = _a.reconnectionAttempts, reconnectionAttempts = _f === void 0 ? Infinity : _f, _g = _a.lazy, lazy = _g === void 0 ? false : _g, _h = _a.inactivityTimeout, inactivityTimeout = _h === void 0 ? 0 : _h;\n        this.wsImpl = webSocketImpl || NativeWebSocket;\n        if (!this.wsImpl) {\n            throw new Error('Unable to find native implementation, or alternative implementation for WebSocket!');\n        }\n        this.wsProtocols = webSocketProtocols || protocol_1.GRAPHQL_WS;\n        this.connectionCallback = connectionCallback;\n        this.url = url;\n        this.operations = {};\n        this.nextOperationId = 0;\n        this.wsTimeout = timeout;\n        this.unsentMessagesQueue = [];\n        this.reconnect = reconnect;\n        this.reconnecting = false;\n        this.reconnectionAttempts = reconnectionAttempts;\n        this.lazy = !!lazy;\n        this.inactivityTimeout = inactivityTimeout;\n        this.closedByUser = false;\n        this.backoff = new Backoff({ jitter: 0.5 });\n        this.eventEmitter = new eventemitter3_1.EventEmitter();\n        this.middlewares = [];\n        this.client = null;\n        this.maxConnectTimeGenerator = this.createMaxConnectTimeGenerator();\n        this.connectionParams = this.getConnectionParams(connectionParams);\n        if (!this.lazy) {\n            this.connect();\n        }\n    }\n    Object.defineProperty(SubscriptionClient.prototype, \"status\", {\n        get: function () {\n            if (this.client === null) {\n                return this.wsImpl.CLOSED;\n            }\n            return this.client.readyState;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SubscriptionClient.prototype.close = function (isForced, closedByUser) {\n        if (isForced === void 0) { isForced = true; }\n        if (closedByUser === void 0) { closedByUser = true; }\n        this.clearInactivityTimeout();\n        if (this.client !== null) {\n            this.closedByUser = closedByUser;\n            if (isForced) {\n                this.clearCheckConnectionInterval();\n                this.clearMaxConnectTimeout();\n                this.clearTryReconnectTimeout();\n                this.unsubscribeAll();\n                this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_TERMINATE, null);\n            }\n            this.client.close();\n            this.client = null;\n            this.eventEmitter.emit('disconnected');\n            if (!isForced) {\n                this.tryReconnect();\n            }\n        }\n    };\n    SubscriptionClient.prototype.request = function (request) {\n        var _a;\n        var getObserver = this.getObserver.bind(this);\n        var executeOperation = this.executeOperation.bind(this);\n        var unsubscribe = this.unsubscribe.bind(this);\n        var opId;\n        this.clearInactivityTimeout();\n        return _a = {},\n            _a[symbol_observable_1.default] = function () {\n                return this;\n            },\n            _a.subscribe = function (observerOrNext, onError, onComplete) {\n                var observer = getObserver(observerOrNext, onError, onComplete);\n                opId = executeOperation(request, function (error, result) {\n                    if (error === null && result === null) {\n                        if (observer.complete) {\n                            observer.complete();\n                        }\n                    }\n                    else if (error) {\n                        if (observer.error) {\n                            observer.error(error[0]);\n                        }\n                    }\n                    else {\n                        if (observer.next) {\n                            observer.next(result);\n                        }\n                    }\n                });\n                return {\n                    unsubscribe: function () {\n                        if (opId) {\n                            unsubscribe(opId);\n                            opId = null;\n                        }\n                    },\n                };\n            },\n            _a;\n    };\n    SubscriptionClient.prototype.on = function (eventName, callback, context) {\n        var handler = this.eventEmitter.on(eventName, callback, context);\n        return function () {\n            handler.off(eventName, callback, context);\n        };\n    };\n    SubscriptionClient.prototype.onConnected = function (callback, context) {\n        return this.on('connected', callback, context);\n    };\n    SubscriptionClient.prototype.onConnecting = function (callback, context) {\n        return this.on('connecting', callback, context);\n    };\n    SubscriptionClient.prototype.onDisconnected = function (callback, context) {\n        return this.on('disconnected', callback, context);\n    };\n    SubscriptionClient.prototype.onReconnected = function (callback, context) {\n        return this.on('reconnected', callback, context);\n    };\n    SubscriptionClient.prototype.onReconnecting = function (callback, context) {\n        return this.on('reconnecting', callback, context);\n    };\n    SubscriptionClient.prototype.onError = function (callback, context) {\n        return this.on('error', callback, context);\n    };\n    SubscriptionClient.prototype.unsubscribeAll = function () {\n        var _this = this;\n        Object.keys(this.operations).forEach(function (subId) {\n            _this.unsubscribe(subId);\n        });\n    };\n    SubscriptionClient.prototype.applyMiddlewares = function (options) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var queue = function (funcs, scope) {\n                var next = function (error) {\n                    if (error) {\n                        reject(error);\n                    }\n                    else {\n                        if (funcs.length > 0) {\n                            var f = funcs.shift();\n                            if (f) {\n                                f.applyMiddleware.apply(scope, [options, next]);\n                            }\n                        }\n                        else {\n                            resolve(options);\n                        }\n                    }\n                };\n                next();\n            };\n            queue(_this.middlewares.slice(), _this);\n        });\n    };\n    SubscriptionClient.prototype.use = function (middlewares) {\n        var _this = this;\n        middlewares.map(function (middleware) {\n            if (typeof middleware.applyMiddleware === 'function') {\n                _this.middlewares.push(middleware);\n            }\n            else {\n                throw new Error('Middleware must implement the applyMiddleware function.');\n            }\n        });\n        return this;\n    };\n    SubscriptionClient.prototype.getConnectionParams = function (connectionParams) {\n        return function () { return new Promise(function (resolve, reject) {\n            if (typeof connectionParams === 'function') {\n                try {\n                    return resolve(connectionParams.call(null));\n                }\n                catch (error) {\n                    return reject(error);\n                }\n            }\n            resolve(connectionParams);\n        }); };\n    };\n    SubscriptionClient.prototype.executeOperation = function (options, handler) {\n        var _this = this;\n        if (this.client === null) {\n            this.connect();\n        }\n        var opId = this.generateOperationId();\n        this.operations[opId] = { options: options, handler: handler };\n        this.applyMiddlewares(options)\n            .then(function (processedOptions) {\n            _this.checkOperationOptions(processedOptions, handler);\n            if (_this.operations[opId]) {\n                _this.operations[opId] = { options: processedOptions, handler: handler };\n                _this.sendMessage(opId, message_types_1.default.GQL_START, processedOptions);\n            }\n        })\n            .catch(function (error) {\n            _this.unsubscribe(opId);\n            handler(_this.formatErrors(error));\n        });\n        return opId;\n    };\n    SubscriptionClient.prototype.getObserver = function (observerOrNext, error, complete) {\n        if (typeof observerOrNext === 'function') {\n            return {\n                next: function (v) { return observerOrNext(v); },\n                error: function (e) { return error && error(e); },\n                complete: function () { return complete && complete(); },\n            };\n        }\n        return observerOrNext;\n    };\n    SubscriptionClient.prototype.createMaxConnectTimeGenerator = function () {\n        var minValue = 1000;\n        var maxValue = this.wsTimeout;\n        return new Backoff({\n            min: minValue,\n            max: maxValue,\n            factor: 1.2,\n        });\n    };\n    SubscriptionClient.prototype.clearCheckConnectionInterval = function () {\n        if (this.checkConnectionIntervalId) {\n            clearInterval(this.checkConnectionIntervalId);\n            this.checkConnectionIntervalId = null;\n        }\n    };\n    SubscriptionClient.prototype.clearMaxConnectTimeout = function () {\n        if (this.maxConnectTimeoutId) {\n            clearTimeout(this.maxConnectTimeoutId);\n            this.maxConnectTimeoutId = null;\n        }\n    };\n    SubscriptionClient.prototype.clearTryReconnectTimeout = function () {\n        if (this.tryReconnectTimeoutId) {\n            clearTimeout(this.tryReconnectTimeoutId);\n            this.tryReconnectTimeoutId = null;\n        }\n    };\n    SubscriptionClient.prototype.clearInactivityTimeout = function () {\n        if (this.inactivityTimeoutId) {\n            clearTimeout(this.inactivityTimeoutId);\n            this.inactivityTimeoutId = null;\n        }\n    };\n    SubscriptionClient.prototype.setInactivityTimeout = function () {\n        var _this = this;\n        if (this.inactivityTimeout > 0 && Object.keys(this.operations).length === 0) {\n            this.inactivityTimeoutId = setTimeout(function () {\n                if (Object.keys(_this.operations).length === 0) {\n                    _this.close();\n                }\n            }, this.inactivityTimeout);\n        }\n    };\n    SubscriptionClient.prototype.checkOperationOptions = function (options, handler) {\n        var query = options.query, variables = options.variables, operationName = options.operationName;\n        if (!query) {\n            throw new Error('Must provide a query.');\n        }\n        if (!handler) {\n            throw new Error('Must provide an handler.');\n        }\n        if ((!is_string_1.default(query) && !getOperationAST_1.getOperationAST(query, operationName)) ||\n            (operationName && !is_string_1.default(operationName)) ||\n            (variables && !is_object_1.default(variables))) {\n            throw new Error('Incorrect option types. query must be a string or a document,' +\n                '`operationName` must be a string, and `variables` must be an object.');\n        }\n    };\n    SubscriptionClient.prototype.buildMessage = function (id, type, payload) {\n        var payloadToReturn = payload && payload.query ? __assign({}, payload, { query: typeof payload.query === 'string' ? payload.query : printer_1.print(payload.query) }) :\n            payload;\n        return {\n            id: id,\n            type: type,\n            payload: payloadToReturn,\n        };\n    };\n    SubscriptionClient.prototype.formatErrors = function (errors) {\n        if (Array.isArray(errors)) {\n            return errors;\n        }\n        if (errors && errors.errors) {\n            return this.formatErrors(errors.errors);\n        }\n        if (errors && errors.message) {\n            return [errors];\n        }\n        return [{\n                name: 'FormatedError',\n                message: 'Unknown error',\n                originalError: errors,\n            }];\n    };\n    SubscriptionClient.prototype.sendMessage = function (id, type, payload) {\n        this.sendMessageRaw(this.buildMessage(id, type, payload));\n    };\n    SubscriptionClient.prototype.sendMessageRaw = function (message) {\n        switch (this.status) {\n            case this.wsImpl.OPEN:\n                var serializedMessage = JSON.stringify(message);\n                try {\n                    JSON.parse(serializedMessage);\n                }\n                catch (e) {\n                    this.eventEmitter.emit('error', new Error(\"Message must be JSON-serializable. Got: \" + message));\n                }\n                this.client.send(serializedMessage);\n                break;\n            case this.wsImpl.CONNECTING:\n                this.unsentMessagesQueue.push(message);\n                break;\n            default:\n                if (!this.reconnecting) {\n                    this.eventEmitter.emit('error', new Error('A message was not sent because socket is not connected, is closing or ' +\n                        'is already closed. Message was: ' + JSON.stringify(message)));\n                }\n        }\n    };\n    SubscriptionClient.prototype.generateOperationId = function () {\n        return String(++this.nextOperationId);\n    };\n    SubscriptionClient.prototype.tryReconnect = function () {\n        var _this = this;\n        if (!this.reconnect || this.backoff.attempts >= this.reconnectionAttempts) {\n            return;\n        }\n        if (!this.reconnecting) {\n            Object.keys(this.operations).forEach(function (key) {\n                _this.unsentMessagesQueue.push(_this.buildMessage(key, message_types_1.default.GQL_START, _this.operations[key].options));\n            });\n            this.reconnecting = true;\n        }\n        this.clearTryReconnectTimeout();\n        var delay = this.backoff.duration();\n        this.tryReconnectTimeoutId = setTimeout(function () {\n            _this.connect();\n        }, delay);\n    };\n    SubscriptionClient.prototype.flushUnsentMessagesQueue = function () {\n        var _this = this;\n        this.unsentMessagesQueue.forEach(function (message) {\n            _this.sendMessageRaw(message);\n        });\n        this.unsentMessagesQueue = [];\n    };\n    SubscriptionClient.prototype.checkConnection = function () {\n        if (this.wasKeepAliveReceived) {\n            this.wasKeepAliveReceived = false;\n            return;\n        }\n        if (!this.reconnecting) {\n            this.close(false, true);\n        }\n    };\n    SubscriptionClient.prototype.checkMaxConnectTimeout = function () {\n        var _this = this;\n        this.clearMaxConnectTimeout();\n        this.maxConnectTimeoutId = setTimeout(function () {\n            if (_this.status !== _this.wsImpl.OPEN) {\n                _this.reconnecting = true;\n                _this.close(false, true);\n            }\n        }, this.maxConnectTimeGenerator.duration());\n    };\n    SubscriptionClient.prototype.connect = function () {\n        var _this = this;\n        this.client = new this.wsImpl(this.url, this.wsProtocols);\n        this.checkMaxConnectTimeout();\n        this.client.onopen = function () { return __awaiter(_this, void 0, void 0, function () {\n            var connectionParams, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.status === this.wsImpl.OPEN)) return [3, 4];\n                        this.clearMaxConnectTimeout();\n                        this.closedByUser = false;\n                        this.eventEmitter.emit(this.reconnecting ? 'reconnecting' : 'connecting');\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4, this.connectionParams()];\n                    case 2:\n                        connectionParams = _a.sent();\n                        this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_INIT, connectionParams);\n                        this.flushUnsentMessagesQueue();\n                        return [3, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        this.sendMessage(undefined, message_types_1.default.GQL_CONNECTION_ERROR, error_1);\n                        this.flushUnsentMessagesQueue();\n                        return [3, 4];\n                    case 4: return [2];\n                }\n            });\n        }); };\n        this.client.onclose = function () {\n            if (!_this.closedByUser) {\n                _this.close(false, false);\n            }\n        };\n        this.client.onerror = function (err) {\n            _this.eventEmitter.emit('error', err);\n        };\n        this.client.onmessage = function (_a) {\n            var data = _a.data;\n            _this.processReceivedData(data);\n        };\n    };\n    SubscriptionClient.prototype.processReceivedData = function (receivedData) {\n        var parsedMessage;\n        var opId;\n        try {\n            parsedMessage = JSON.parse(receivedData);\n            opId = parsedMessage.id;\n        }\n        catch (e) {\n            throw new Error(\"Message must be JSON-parseable. Got: \" + receivedData);\n        }\n        if ([message_types_1.default.GQL_DATA,\n            message_types_1.default.GQL_COMPLETE,\n            message_types_1.default.GQL_ERROR,\n        ].indexOf(parsedMessage.type) !== -1 && !this.operations[opId]) {\n            this.unsubscribe(opId);\n            return;\n        }\n        switch (parsedMessage.type) {\n            case message_types_1.default.GQL_CONNECTION_ERROR:\n                if (this.connectionCallback) {\n                    this.connectionCallback(parsedMessage.payload);\n                }\n                break;\n            case message_types_1.default.GQL_CONNECTION_ACK:\n                this.eventEmitter.emit(this.reconnecting ? 'reconnected' : 'connected');\n                this.reconnecting = false;\n                this.backoff.reset();\n                this.maxConnectTimeGenerator.reset();\n                if (this.connectionCallback) {\n                    this.connectionCallback();\n                }\n                break;\n            case message_types_1.default.GQL_COMPLETE:\n                this.operations[opId].handler(null, null);\n                delete this.operations[opId];\n                break;\n            case message_types_1.default.GQL_ERROR:\n                this.operations[opId].handler(this.formatErrors(parsedMessage.payload), null);\n                delete this.operations[opId];\n                break;\n            case message_types_1.default.GQL_DATA:\n                var parsedPayload = !parsedMessage.payload.errors ?\n                    parsedMessage.payload : __assign({}, parsedMessage.payload, { errors: this.formatErrors(parsedMessage.payload.errors) });\n                this.operations[opId].handler(null, parsedPayload);\n                break;\n            case message_types_1.default.GQL_CONNECTION_KEEP_ALIVE:\n                var firstKA = typeof this.wasKeepAliveReceived === 'undefined';\n                this.wasKeepAliveReceived = true;\n                if (firstKA) {\n                    this.checkConnection();\n                }\n                if (this.checkConnectionIntervalId) {\n                    clearInterval(this.checkConnectionIntervalId);\n                    this.checkConnection();\n                }\n                this.checkConnectionIntervalId = setInterval(this.checkConnection.bind(this), this.wsTimeout);\n                break;\n            default:\n                throw new Error('Invalid message type!');\n        }\n    };\n    SubscriptionClient.prototype.unsubscribe = function (opId) {\n        if (this.operations[opId]) {\n            delete this.operations[opId];\n            this.setInactivityTimeout();\n            this.sendMessage(opId, message_types_1.default.GQL_STOP, undefined);\n        }\n    };\n    return SubscriptionClient;\n}());\nexports.SubscriptionClient = SubscriptionClient;\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"script"}